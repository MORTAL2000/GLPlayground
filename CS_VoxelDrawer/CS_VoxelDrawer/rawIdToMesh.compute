#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer idBlock { uint blockId[]; };
layout(std430, binding = 1) buffer instanceBlock1 { vec4 vertPosBuffer[]; };
layout(std430, binding = 2) buffer instanceBlock2 { vec4 vertNormalBuffer[]; };
layout(std430, binding = 3) buffer instanceBlock3 { ivec4 vertPropBuffer[]; };
layout(std430, binding = 4) buffer indirectBuffer
{
    uint  count;
    uint  instanceCount;
    uint  first;
    uint  baseInstance;
};

int getPos(ivec3 pos)
{
    return pos.x * 32 * 32 + pos.y * 32 + pos.z;
}

void main()
{
    ivec3 blockPos = ivec3(gl_GlobalInvocationID.xyz);
    int serPos = getPos(blockPos);

    if(blockId[serPos] == 0)
    {
        return;
    }

    bvec3 facePos = bvec3(false, false, false), faceNeg = bvec3(false, false, false);
    int vertices = 0;

    if(blockPos.x <= 0 || blockId[serPos - 32 * 32] == 0)
    {
        faceNeg.x = true;
        vertices += 6;
    }
    if(blockPos.y <= 0 || blockId[serPos -      32] == 0)
    {
        faceNeg.y = true;
        vertices += 6;
    }
    if(blockPos.z <= 0 || blockId[serPos -       1] == 0)
    {
        faceNeg.z = true;
        vertices += 6;
    }
    if(blockPos.x >= 31|| blockId[serPos + 32 * 32] == 0)
    {
        facePos.x = true;
        vertices += 6;
    }
    if(blockPos.y >= 31|| blockId[serPos +      32] == 0)
    {
        facePos.y = true;
        vertices += 6;
    }
    if(blockPos.z >= 31|| blockId[serPos +       1] == 0)
    {
        facePos.z = true;
        vertices += 6;
    }

    uint index = atomicAdd(count, vertices);
    vec4 blockPosf4 = vec4(blockPos.x, blockPos.y, blockPos.z, 0.0f);

    int blockProp = (clamp(blockPos.y, 8, 24) - 8) * 2;

    if(faceNeg.x == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(-1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }

    if(faceNeg.y == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, -1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }

    if(faceNeg.z == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, -1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }

    if(facePos.x == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }

    if(facePos.y == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }

    if(facePos.z == true)
    {
        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(0.0f, 1.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;

        vertPosBuffer[index] = blockPosf4 + vec4(1.0f, 0.0f, 1.0f, 1.0f);
        vertNormalBuffer[index]= vec4(0.0f, 0.0f, 1.0f, 1.0f);
        vertPropBuffer[index].x = blockProp;
        index += 1;
    }
}
